# üöÄ GitHub Copilot Agent Mode Hands‚ÄëOn Workshop

> **Format:** Onsite, instructor-led, highly interactive, ‚Äúlearn by doing‚Äù  
> **Environment:** Local VS Code *or* GitHub Codespaces  
> **Audience:** Developers new to Copilot, Agent Mode, and possibly VS Code  
> **Duration:** 3.5‚Äì4 hours (with optional trims)  
> **Core Goal:** Leave with practical confidence using Agent Mode to build, test, refactor, and automate.

---

## üß≠ Why This Workshop Exists

You‚Äôve seen AI generate snippets. Now you‚Äôll experience an AI *teammate* that plans, edits multiple files, runs tools, and iterates. This workshop turns anxiety (‚ÄúWill it break my code?‚Äù) into confidence (‚ÄúI know how to steer it.‚Äù).

We focus on:

- Reducing first-time friction (setup, UI orientation)
- Building something real (Cart feature) collaboratively with Agent Mode
- Improving test coverage and reasoning through failures
- Reinforcing repeatability with custom prompts & handoffs
- Optional advanced tracks: security, MCP, CI/CD

---

## üéØ Learning Outcomes & Success Criteria

By the end of this workshop, you will demonstrate measurable competency in:

### Core Competencies (Required)
- [ ] **Environment Mastery**: Successfully set up and validate development environment (local VS Code or Codespaces) with all services running
- [ ] **Mode Selection**: Correctly identify and choose between Ask/Plan/Agent modes for 3 different scenarios (80% accuracy)
- [ ] **Feature Implementation**: Use Agent Mode to implement the Cart feature meeting all acceptance criteria (see Module 4)
- [ ] **Test-Driven Development**: Generate, execute, and iterate on tests with >70% code coverage improvement
- [ ] **Workflow Automation**: Create and execute at least 1 reusable custom prompt file
- [ ] **Prompt Engineering**: Transform 3 vague prompts into precise, actionable instructions using the refinement framework

### Advanced Competencies (Optional)
- [ ] **Security Awareness**: Identify and mitigate 2+ security risks using Agent Mode assistance
- [ ] **External Integration**: Successfully configure and use 1 MCP server extension
- [ ] **CI/CD Automation**: Generate functional GitHub Actions workflow or deployment script

### Success Metrics
- **Completion Rate**: 80% of required competencies demonstrated
- **Quality Standard**: All generated code passes linting and builds successfully  
- **Practical Application**: Able to use learned workflows in real projects within 1 week
- **Confidence Level**: Self-report 7/10 or higher confidence in using Agent Mode independently

1. Spin up a ready-to-code environment in **local VS Code or Codespaces**.
2. Distinguish **Ask vs Plan vs Agent Mode** and choose the right one.
3. Use Agent Mode to implement a multi-file feature (Cart) from a design.
4. Generate, run, and refine tests‚Äîembracing *self-healing*.
5. Capture reusable workflows via **custom prompt files**.
6. (Optional) Explore **MCP Servers**, GitHub automation & security prompts.
7. Refine vague prompts into precise, high-impact instructions.

> üîÑ Mindset Shift: You aren‚Äôt delegating *creativity*‚Äîyou‚Äôre delegating *mechanical labor*.

---

## üó∫Ô∏è Agenda At a Glance

| Time | Module | Theme | Energy Marker |
|------|--------|-------|---------------|
| 00:00‚Äì00:15 | 0 | Setup & Orientation | üëã Icebreaker |
| 00:15‚Äì00:35 | 1 | Copilot Concepts | üí° First ‚ÄúAha‚Äù |
| 00:35‚Äì01:10 | 2 | First Agent Task | ‚úÖ Safe Win |
| 01:10‚Äì01:25 | 3 | Break + Q&A | ‚òï Reset |
| 01:25‚Äì02:05 | 4 | Cart Feature Build | üõ†Ô∏è Flow Zone |
| 02:05‚Äì02:40 | 5 | Test Coverage Boost | üß™ Confidence |
| 02:40‚Äì03:05 | 6 | Custom Prompts & Handoff | üóÇÔ∏è Reuse |
| 03:05‚Äì03:25 | 7A | Security/Observability (Opt) | üõ°Ô∏è Insight |
| 03:05‚Äì03:25 | 7B | MCP & Browser Testing (Opt) | üåê Extend |
| 03:25‚Äì03:45 | 8 | Prompt Refinement | üéØ Mastery |
| 03:45‚Äì04:00 | Buffer | Stretch / Feedback | üîÅ Close |

> ‚è≥ **2‚ÄëHour Variant:** Run 0 ‚Üí 4, slice 5 short, jump to 8.

---

## üßë‚Äçüíª Prerequisites & Accessibility

### Technical Requirements

- GitHub account with Copilot enabled
- One of:
  - **Local machine**: Node.js 18+, Git, VS Code with Copilot extension
  - **OR GitHub Codespace** (recommended for consistency across participants)
- (Optional Advanced): Azure CLI, GitHub CLI, local Chrome/Chromium (for MCP Playwright)

### Accessibility & Learning Accommodations

- **Visual**: Screen reader compatible; high contrast mode available in VS Code
- **Motor**: All exercises work with keyboard navigation; mouse interactions are optional
- **Cognitive**: Self-paced modules with clear checkpoints; repeat exercises encouraged
- **Technical Background**: No prior AI/ML knowledge required; basic web development helpful but not essential
- **Time Zones**: Async-friendly exercises; recordings available for review

### Experience Levels Supported
- **Beginner**: Guided prompt files and step-by-step instructions provided
- **Intermediate**: Choose-your-own-path options with creative freedom
- **Advanced**: Optional deep-dive tracks (security, MCP, CI/CD)

### Pre-Workshop Setup (15 minutes)

```bash
git clone <your-fork-or-demo-repo-url> demo-copilot-workshop
cd demo-copilot-workshop
npm install
```

### Build Sanity Check

```bash
npm run build --workspace=api
npm run build --workspace=frontend
```

### Codespaces Quick Start

1. Open repo ‚Üí **Code** ‚Üí **Codespaces** ‚Üí Create.  
2. Wait for install; open Copilot Chat (sidebar).  
3. Mark ports **Public**: API (3000), Frontend (e.g., 5137).  
4. (Optional) Switch to Insiders for preview features.  
5. Browser-based Codespaces = no interactive playwright UI; generation-only.

> üåÄ Tip: If something feels slow, *close unused panels*‚ÄîAgent logs can be chatty.

---

## üèóÔ∏è Project Flyover (Module 0)

| Area | Folder | What To Notice |
|------|--------|----------------|
| API | `api/` | Repos, routes, models, migrations |
| Frontend | `frontend/` | React + Vite + basic product tiles |
| Infra | `infra/` | Deployment script scaffolding |
| Docs | `docs/` | Reference & (now) this workshop guide |

> üé§ Facilitator Prompt: ‚ÄúFind one file you *think* we‚Äôll modify today. Keep it in mind.‚Äù

---

## üß† Copilot Modes (Module 1)

| Mode | Use When | Example |
|------|----------|---------|
| Inline | You know what to write; want speed | Autocomplete helper |
| Ask | Need an explanation/Q&A | ‚ÄúExplain this repo layout.‚Äù |
| Plan | Want structured steps before changing code | ‚ÄúPlan adding a Cart page.‚Äù |
| Agent | Ready to execute multi-step changes/tests | ‚ÄúImplement the Cart plan.‚Äù |
| Custom Prompt | Repeatable workflow | Re-run coverage improvement |
| MCP | Extend with external capabilities | Browser test, GitHub ops |

> üß© Mini-Exercise (3 min): In pairs, map a real task you do weekly to the best mode.

---

## ‚úÖ First Win: Safe Agent Task (Module 2)

**Goal:** Add a harmless log line via Agent Mode to build trust.

Prompt (Agent Mode):

```text
Add a console log at the start of the suppliers GET route indicating how many suppliers are returned.
```

**Flow:** Review diff ‚Üí Accept ‚Üí Build API ‚Üí (Optional) run & hit endpoint.

> üéØ Debrief: ‚ÄúWhat *reassured* you? What *still* feels risky?‚Äù

**Badge Unlocked:** üü© *Agent Initiated*

---

## üõí Feature Build: Cart (Module 4)

**Scenario:** Product listing exists, but no cart. We‚Äôll add: Cart page, NavBar badge, add/remove, subtotal.

### Path A (Beginner Friendly ‚Äì Guided Prompt File)

If a prompt file (e.g., `demo-cart-page.prompt.md`) exists:

1. Open it ‚Üí skim frontmatter.
2. Run it in Agent Mode.
3. Verify:
   - New component(s)
   - State wiring
   - Navigation entry

### Path B (Creative Build ‚Äì Vision Assist)

1. Open Plan Mode.
2. Attach `docs/design/cart.png` (if available).
3. Prompt:

```text
Plan minimal steps to add a Cart page matching image: routing, NavBar badge w/ item count, state mgmt, add/remove interactions. Output numbered steps.
```

1. Switch to Agent Mode:

```text
Implement the plan you just produced.
```

1. Run frontend:

```bash
npm run dev --workspace=frontend
```

1. Interact: Add items ‚Üí badge updates ‚Üí open cart page.

> üí¨ Reflection Prompt: ‚ÄúDid Agent over-build anything? If yes, how would you constrain next time?‚Äù

**Badge Unlocked:** üü¶ *Multi-File Change Navigator*

---

## üß™ Testing & Self-Healing (Module 5)

**Goal:** Improve coverage + watch Agent iterate.

### Option 1: Use Coverage Prompt

```text
Analyze current API route test coverage. Add tests for error and validation edge cases. Run tests and summarize coverage delta.
```

### Option 2: Custom Prompt File (if provided)

Run `demo-unit-test-coverage.prompt.md`.

Then manually run:

```bash
cd api
npm test
```

If failure occurs, ask:

```text
Explain why test X failed. Propose minimal fix; then apply and re-run only affected tests.
```

> üõ†Ô∏è Encourage accepting *partial* value‚Äîdon‚Äôt chase 100% blindly.

**Badge Unlocked:** üü® *Confident Test Driver*

---

## üóÇÔ∏è Custom Prompts & Handoffs (Module 6)

**Why:** Consistency & team acceleration.

Exercise:

1. Use Plan Mode for a ‚ÄúProfile Page‚Äù skeleton.
2. Run a handoff prompt (e.g., `/handoff`).
3. Inspect generated summary file.
4. Agent Mode prompt:

```text
Implement only the skeleton defined in handoff.md‚Äîno styling yet. Stop after creating components and routes.
```

> üîç Discussion: ‚ÄúHow does a handoff file reduce context noise?‚Äù

**Badge Unlocked:** üü™ *Workflow Systematizer*

---

## üõ°Ô∏è Optional Track A: Security & Observability (Module 7A)

Prompts:

```text
List top 5 likely security risks in this codebase. Prioritize by impact & ease of remediation.
```

Then:

```text
Generate a safe patch for the highest priority issue. Explain risk before showing code.
```

> ‚ö†Ô∏è Reinforce: Human review still required.

---

## üåê Optional Track B: MCP & Browser (Module 7B)

Local environment recommended (Playwright MCP).

1. Start Playwright MCP server (Command Palette ‚Üí MCP: List Servers ‚Üí Start). 
2. Prompt:

```text
Create a BDD feature file testing adding two products to the cart and verifying subtotal.
```

3. (If local) Ask Agent to run the scenario; (If Codespaces) just inspect generated steps.

> üß™ Teaching Moment: ‚ÄúMCP = capability plug-in surface.‚Äù

---

## üéØ Prompt Refinement (Module 8)

Exercise:

1. Enter vague prompt: `Add a cart page`.
1. Ask: `Critique this prompt. What‚Äôs missing? Provide an improved version.`
1. Submit improved version.

Checklist for Upgrade:

- Context (what exists) ‚úÖ
- Outcome (what good looks like) ‚úÖ
- Constraints (don‚Äôt over-build) ‚úÖ
- Edge Cases (empty cart, duplicate adds) ‚úÖ

**Badge Unlocked:** üü• *Prompt Architect*

---

## üöë Extended Troubleshooting Guide

### Environment Issues
| Symptom | Likely Cause | Fast Fix | Prevention |
|---------|--------------|----------|------------|
| API 404 | Server not running | `npm run dev:api` / check port 3000 | Always run build sanity check first |
| CORS in browser | API port private (Codespaces) | Make port Public in Ports tab | Set ports to Public by default |
| `npm install` fails | Node version mismatch | Use Node 18+ or nvm | Check `.nvmrc` file for version |
| Docker containers won't start | Port conflicts or insufficient memory | Stop other services; increase Docker memory | Use `docker-compose down` before starting |
| VS Code Copilot not responding | Extension needs reload | Cmd/Ctrl+Shift+P ‚Üí "Reload Window" | Check Copilot status in status bar |

### Agent Mode Issues  
| Symptom | Likely Cause | Fast Fix | Better Prompting |
|---------|--------------|----------|------------------|
| Agent stalls mid-plan | Overly vague / no actionable steps | Re-run in Plan Mode first | Add specific constraints and examples |
| Badge not updating | State not wired to context/provider | Inspect component diff; re-prompt with constraint | Specify exact state management approach |
| Repeated test failure | Flaky assumption in test logic | Ask Agent to stabilize with deterministic input | Request specific test data and mocking |
| Agent makes too many changes | Scope creep in prompt | Use `git checkout` to revert; add constraints | Start with "Make minimal changes to..." |
| Generated code doesn't match design | Missing visual context | Attach design files; describe layout | Include specific UI requirements |

### Advanced Features
| Symptom | Likely Cause | Fast Fix | Alternative |
|---------|--------------|----------|-------------|
| Playwright MCP unavailable | Running in web Codespace | Explain limitation; generate only | Use local VS Code or plain test generation |
| GitHub CLI commands fail | Authentication not set up | `gh auth login` | Use web interface for GitHub operations |
| Security prompts too generic | Lacking codebase context | Point to specific files/functions | Use targeted security linting tools |

### Getting Help
- **During Workshop**: Raise hand or use chat function
- **Stuck on Exercise**: Skip and return later; all modules can be done independently  
- **Technical Issues**: Pair with neighbor or ask instructor for 1:1 debugging
- **Accessibility Needs**: Contact facilitator for alternative approaches

---

## üß¨ Engagement Mechanics (Use As Needed)

| Mechanic | When | Purpose |
|----------|------|---------|
| Badges | Module completion | Motivation |
| Pair & Swap | After Module 4 | Shared learning |
| ‚ÄúPrompt Roast‚Äù | Refinement session | Improve clarity |
| Live Poll (‚ÄúWho feels in control?‚Äù) | Mid-point | Gauge confidence |
| Time Boxing (10-min sprint) | Test module | Maintain momentum |

> üí° Tip: Celebrate *first small success*, not perfection.

---

## üìî Glossary (Plain Language)

| Term | Meaning |
|------|---------|
| Agent Mode | Copilot executes a multi-step plan & edits code |
| Plan Mode | Copilot drafts steps‚Äîno code yet |
| MCP | Extends Copilot with external tools (GitHub, Playwright) |
| Self-Healing | Agent fixes after a failing test run |
| Handoff | Compressed summary for continuation or teammate |
| Coverage | % of code executed by tests |

---

## üßë‚Äçüè´ Facilitator Playbook

| Phase | Do This | Why |
|-------|---------|-----|
| Before | Pre-run all prompts; cache deps | Avoid cold-start delays |
| Kickoff | Show a *bad* prompt then a refined one | Sets tone for craft |
| Midpoint | Ask for 1 word describing experience | Surface friction |
| Struggle Moments | Encourage rephrasing over abandoning | Teaches steering |
| Wrap | Recap badges earned | Reinforces achievement |

**Energy Intervention Ideas:** quick stretch, rotate pairs, ‚Äúprompt lightning round.‚Äù

---

## üß© Stretch Goals

- Generate a GitHub Actions CI workflow.
- Ask: ‚ÄúProduce Terraform or Bicep skeleton for this architecture.‚Äù
- Refactor a repository function for clarity with tests guarding behavior.
- Create an internal cheat sheet prompt file.

---

## üìù Mini Prompt Library (Copy/Paste)

| Scenario | Prompt |
|----------|--------|
| Feature Plan | Plan steps to add a Cart page with routing, NavBar badge, subtotal, and empty-state UX. Keep it minimal; list assumptions. |
| Coverage Boost | Analyze API test coverage and add missing validation + error path tests. Show a summary table. |
| Security Pass | Identify top 5 likely security risks; propose one-line mitigations. |
| Refactor | Refactor the suppliers repository for readability without changing behavior. Add or update tests if needed. |
| Handoff | Summarize our current Cart implementation design, assumptions, and open gaps in a handoff.md file. |

---

## üß™ Reflection Questions (End)

- What prompt gave you the *best* result today? Why?
- What‚Äôs one workflow you‚Äôll automate first next week?
- Where did Agent Mode feel ‚Äútoo confident,‚Äù and how will you constrain it next time?

---

## üé§ Closing Script (Facilitator)

‚ÄúToday you moved from watching AI to *directing* it. You learned to scope work, review intelligently, and turn repeated effort into reusable prompts. Your next challenge: pick one recurring task tomorrow and let Agent Mode handle the boilerplate while you focus on intent.‚Äù

---

## üîó Follow-Up Resources

- Official GitHub Copilot Docs
- Internal engineering standards (add links)
- Security hardening checklist (org resource)
- Prompt crafting cheatsheet (to create next!)

---

## ‚úÖ License & Adaptation

Fork, adapt, remix. Keep a CHANGELOG so improvements compound.

---

**You‚Äôre Ready. Build Boldly.** üß†‚ö°

